For Project 1 I wrote a program which reads in a list of names from an external file, prints all of the names that it found in the file, sorts the names alphabetically, then outputs the sorted list to another file chosen by the user.
 
The main algorithm of the program is the sorting algorithm, which is a series of loops, the first of which goes through every letter in the alphabet, the second then goes through the unsorted array and checks for names beginning with the letter that the first loops is on, if a name starts with the same letter the algorithm then checks to see if the name that was last sorted (if there is one) starts with the same letter also, if the previously sorted name starts with the same letter then another loop compares the two names character by character and then places the unsorted name where it should be. To avoid issues with lowercase letters (i.e. a > A on the ASCII table, which would have meant that any lowercase letter would have taken precedence over any uppercase letter) I made the algorithm that compares names character by character store the two characters it was comparing at any given iteration in two separate char variables and then I had it convert any lowercase letters to their uppercase version by simply subtracting 32, doing it like this allowed me to compare the characters ‘fairly’ without having to actually modify the names stored in the unsorted and sorted arrays. Doing this conversion did present a problem where the char from the name that was already sorted would have 64 subtracted from it in the lowercase to uppercase conversion instead of the regular 32, after some investigation I found that this was because of a simple misspelling of an identifier. The main problem of the project was writing the sorting algorithm and ultimately it took me three or four complete rewrites to get an algorithm that even properly functioned, and then a few more revisions to buff out any weird behaviors.

Given more time, and in some cases less restrictions, there are a few changes and additions I would have liked to make to my program. The main change that I would have liked to make would be command line arguments. Currently, the program has to be run, and then it asks for the name of the file to read from and to write to, given more time I would have liked to have these input as command line arguments such as “./Project1 (input file name) (output file name)” and then I would have also added a “-d” argument to have the program enable debug output. I would have also liked to have a quick function which checks if the user added a file extension, likely .txt, to the end of their input and output file names and then if there is no extension it would append the extension to the end (or overwrite the last four characters before the null char since dynamic memory was restricted).

