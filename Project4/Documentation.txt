Project four gave us the assignment of taking a file and creating an algorithm to find a message hidden within the file. The main concept that this project was meant to teach was the utilization of dynamic allocation for arrays using pointers as well as deallocation with delete and delete[]. We used the dynamic allocation to size c-style strings to the exact size of a word plus a null character. The program didn’t need a menu this time, it just simply had to follow an algorithm in order to decode the hidden message.
	I had many problems with this project. One small one that I had was I had to take some time to look up what the different use cases are for delete and delete[], because I still wasn’t completely sure on the differences between the two. The biggest problem that I had was taking the final output string and reallocating memory to make it larger; every solution that I tried ended up with a segmentation fault and I believe this is because the variable itself is in the scope of main, it was being passed as an argument to another function, and that function would pass it to another function as an argument where it was then supposed to be deallocated and reallocated. I solved this issue by deallocating and reallocating the memory for the variable within main before it was concatenated with another string. Not necessarily a problem, but the biggest challenge was figuring out how to size the word variable of the piece struct to be the exact size for the word that it holds.
	My program has multiple functions, the main three are ReadData, ReadDataInitial, and CrackTheCode. ReadData and ReadDataInitial are both meant to read in data from the file, the difference between the two is that RDI was made just to read in the key amount and word amount so that I could dynamically size the arrays that held both parts before I read into them with ReadData. CrackTheCode was my main algorithm and it essentially is just a collection of loops which check for certain conditions which ultimately tell it if it should keep the word or discard it and keep going. CrackTheCode returns an int each time it is run, this int is the offset notation number of the Piece struct that contains the word for that key and stores the int in an array of ints, these ints are then later used to concatenate the strings together into the final output.
	Given more time I would try to work on getting the deallocation and reallocation of the final output string to work within my string concatenation function and I would probably also put in some checks to make sure that pointers don’t end up going out of bounds, other than that though I am pretty happy with how the project turned out.
