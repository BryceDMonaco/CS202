#include <iostream>
#include <fstream>
#include "Agency.h"
using namespace std;

////////////////////////////////////////////////////////////////////////////////
//							Begin Car Implementation						  //
////////////////////////////////////////////////////////////////////////////////

//Constructors
Car::Car ()
{
	make = new char[20];
	model = new char[20];

}

Car::Car(char *sentMake, char *sentModel, int sentYear, float sentPrice, bool avail)
{
	make = new char[20];
	model = new char[20];

	char *inputTrav = sentMake;
	char *outputTrav = make;
	
	//Copy in the make
	for (int i = 0; i < 20; i++)
	{
		*outputTrav = *inputTrav;
		
		if (*inputTrav == '\0')
		{
			break;
		
		}
		
		inputTrav++;
		outputTrav++;
		
	}
	
	inputTrav = sentModel;
	outputTrav = model;
	
	//Copy in the model
	for (int i = 0; i < 20; i++)
	{
		*outputTrav = *inputTrav;
		
		if (*inputTrav == '\0')
		{
			break;
		
		}
		
		inputTrav++;
		outputTrav++;
	
	}
	
	year = sentYear;
	price = sentPrice;
	available = avail;
	
	inputTrav = NULL;
	outputTrav = NULL;
	
}

Car::Car(const Car& sentCar)
{
	make = new char[20];
	model = new char[20];
	
	char *inputTrav = sentCar.make;
	char *outputTrav = make;
	
	//Copy in the make
	for (int i = 0; i < 20; i++)
	{
		*outputTrav = *inputTrav;
		
		if (*inputTrav == '\0')
		{
			break;
		
		}
		
		inputTrav++;
		outputTrav++;
		
	}
	
	inputTrav = sentCar.model;
	outputTrav = model;
	
	//Copy in the model
	for (int i = 0; i < 20; i++)
	{
		*outputTrav = *inputTrav;
		
		if (*inputTrav == '\0')
		{
			break;
		
		}
		
		inputTrav++;
		outputTrav++;
	
	}
	
	year = sentCar.year;
	price = sentCar.price;
	available = sentCar.available;
	
	inputTrav = NULL;
	outputTrav = NULL;

}

//Destructor
Car::~Car ()
{
	delete[] make;
	delete[] model;
	
	make = NULL;
	model = NULL;
	
}

//Car Class Functions
void Car::copy(Car sentCar)
{
	delete[] make;
	delete[] model;
	
	make = new char[20];
	model = new char[20];
	
	char *inputTrav = sentCar.make;
	char *outputTrav = make;
	
	//Copy in the make
	for (int i = 0; i < 20; i++)
	{
		*outputTrav = *inputTrav;
		
		if (*inputTrav == '\0')
		{
			break;
		
		}
		
		inputTrav++;
		outputTrav++;
		
	}
	
	inputTrav = sentCar.model;
	outputTrav = model;
	
	//Copy in the model
	for (int i = 0; i < 20; i++)
	{
		*outputTrav = *inputTrav;
		
		if (*inputTrav == '\0')
		{
			break;
		
		}
		
		inputTrav++;
		outputTrav++;
	
	}
	
	year = sentCar.year;
	price = sentCar.price;
	available = sentCar.available;
	
	inputTrav = NULL;
	outputTrav = NULL;
	
	return;

}

void Car::print() const
{
	cout << "\t" << year << " " << make << " " << model << " (Price: $" << price << ")(";
	
	if (available)
	{
		cout << "Available)" << endl;
	
	} else
	{	
		cout << "Not Available)" << endl;
		
	}
	
	return;

}

//Get Car Class Value Functions
char * Car::getMake() const
{
	return make;

}

char * Car::getModel() const
{
	return model;

}

int Car::getYear() const
{
	return year;

}
float Car::getPrice() const
{
	return price;

}

bool Car::getAvailable() const
{
	return available;

}

//Car Class Set Value Functions
void Car::setMake(char *sentMake)
{
	delete[] make;
	
	make = new char[20];
	
	char *inputTrav = sentMake;
	char *outputTrav = make;
	
	//Copy in the make
	for (int i = 0; i < 20; i++)
	{
		*outputTrav = *inputTrav;
		
		if (*inputTrav == '\0')
		{
			break;
		
		}
		
		inputTrav++;
		outputTrav++;
		
	}
	
	inputTrav = NULL;
	outputTrav = NULL;
	
	return;

}

void Car::setModel(char *sentModel)
{
	delete[] model;
	
	model = new char[20];
	
	char *inputTrav = sentModel;
	char *outputTrav = model;
	
	//Copy in the model
	for (int i = 0; i < 20; i++)
	{
		*outputTrav = *inputTrav;
		
		if (*inputTrav == '\0')
		{
			break;
		
		}
		
		inputTrav++;
		outputTrav++;
	
	}
	
	inputTrav = NULL;
	outputTrav = NULL;
	
	return;
	
}

void Car::setYear(int sentYear)
{
	year = sentYear;
	
	return;

}

void Car::setPrice(float sentPrice)
{
	price = sentPrice;
	
	return;
	
}

void Car::setAvailable(bool avail)
{
	available = avail;
	
	return;
	
}

////////////////////////////////////////////////////////////////////////////////
//							Begin Agency Implementation						  //
////////////////////////////////////////////////////////////////////////////////

//Constructors
Agency::Agency()
{
	name = new char[20];
	zipcode = new int[5];
	inventory = new Car[15];

}

Agency::Agency(const Agency& sentAgency)
{
	name = new char[20];
	zipcode = new int[5];
	inventory = new Car[15];
	
	char *inputTrav = sentAgency.name;
	char *outputTrav = name;
	
	for (int i = 0; i < 20; i++)
	{
		*outputTrav = *inputTrav;
		
		if (*inputTrav == '\0')
		{
			break;
		
		}
		
		inputTrav++;
		outputTrav++;
	
	}
	
	inputTrav = NULL;
	outputTrav = NULL;
	
	int *zipTravIn = sentAgency.zipcode;
	int *zipTravOut = zipcode;
	
	for (int i = 0; i < 5; i++)
	{
		*zipTravOut = *zipTravIn;
		
		zipTravOut++;
		zipTravIn++;
	
	}
	
	zipTravIn = NULL;
	zipTravOut = NULL;
	
	Car *carTravIn = sentAgency.inventory;
	Car *carTravOut = inventory;
	
	for (int i = 0; i < 15; i++)
	{
		(*carTravOut).copy(*carTravIn);
		
		carTravIn++;
		carTravOut++;
	
	}
	
	carTravIn = NULL;
	carTravOut = NULL;
	
}

//Destructor
Agency::~Agency () 
{
	delete[] name;
	delete[] zipcode;
	delete[] inventory;

}

//Agency Class Functions
void Agency::readInData(char *fileName)
{
	ifstream input;
	
	input.open(fileName);
	
	//Read in agency name
	input >> name;
	
	char *buffer = new char[6];
	char *buffTrav = buffer;
	
	//Read in the zip as a string
	input >> buffer;
	
	int *zipTrav = zipcode;
	
	//Convert the zip string into an int array
	for (int i = 0; i < 5; i++)
	{
		*zipTrav = (int) ((*buffTrav) - '0');
		
		zipTrav++;
		buffTrav++;
		
	}
	
	delete[] buffer;
	
	Car *carTrav = inventory;
	
	//Read in the car data
	for (int i = 0; i < 15; i++)
	{
		char *carMake = new char[20];
		char *carModel = new char[20];
		float carPrice;
		int carYear;
		bool carAvail;
		
		input >> carYear;
		input >> carMake;
		input >> carModel;
		input >> carPrice;
		input >> carAvail;
		
		(*carTrav).setYear(carYear);
		(*carTrav).setMake(carMake);
		(*carTrav).setModel(carModel);
		(*carTrav).setPrice(carPrice);
		(*carTrav).setAvailable(carAvail);
		
		delete[] carMake;
		delete[] carModel;
		
		carTrav++;
		
	}
	
	carTrav = NULL;
	zipTrav = NULL;
	buffer = NULL;
	buffTrav = NULL;
	
	input.close();
	
	return;

}

void Agency::print() const
{
	cout << "Agency: " << name << " (Zip: ";
	
	int *zipTrav = zipcode;
	
	for (int i = 0; i < 5; i++)
	{
		cout << *zipTrav;
		
		zipTrav++;
	
	}
	
	zipTrav = NULL;
	
	cout << ")" << endl;
	
	Car *carTrav = inventory;
	
	for (int i = 0; i < 15; i++)
	{
		cout << (i + 1) << ". "; //To make it a numbered list
		
		(*carTrav).print();
		
		carTrav++;
		
	}
	
	carTrav = NULL;
	
	return;
	
}

void Agency::printAvailableCars() const
{
	Car *carTrav = inventory;
	
	for (int i = 0; i < 15; i++)
	{
		if ((*carTrav).getAvailable())
		{
			cout << (i + 1) << ". "; //To make it a numbered list in the array order
		
			(*carTrav).print();
			
		}
		
		carTrav++;
		
	}
	
	carTrav = NULL;
	
	return;

}

void Agency::findMostExpensive() const
{
	int expensiveLoc = 0;
	float highCost = 0.0;
	
	Car *carTrav = inventory;
	
	for (int i = 0; i < 15; i++)
	{
		float thisCost = (*carTrav).getPrice();
		
		if (thisCost > highCost)
		{
			expensiveLoc = i;
			highCost = thisCost;
			
		}
		
		carTrav++;
		
	}
	
	carTrav = inventory;
	
	for (int i = 0; i < expensiveLoc; i++)
	{
		carTrav++;
	
	}
	
	cout << "The most expensive car is: " << endl;
	
	(*carTrav).print();
	
	carTrav = NULL;
	
	return;
	
}

float Agency::estimateCost(int carNumber, int dayAmount) const
{
	Car *carTrav = inventory;
	
	for (int i = 0; i < carNumber; i++)
	{
		carTrav++;
	
	}
	
	float thisPrice = (*carTrav).getPrice();
	float cost = thisPrice * ((float) dayAmount);
	
	carTrav = NULL;
	
	return cost;

}

//Bubble
	/*
		Compare each pair of adjacent elements from the beginning of an array
		and, if they are in reversed order, swap them.
		
		If at least one swap has been done, repeat step 1.
	*/ 
void Agency::sortByMake() // alphabetical
{
	int sortCount;
	
	do
	{
		Car *onCar = inventory;
		Car *adjCar = inventory; //Adjacent Car, i+1
		adjCar++;
		
		for (int i = 0; i < 14; i++) //14 so that adjCar stays in bounds
		{
			sortCount = 0;
			
			char *onCarChar = (*onCar).getMake();
			char *adjCarChar = (*adjCar).getMake();
			
			if (*onCarChar > *adjCarChar) //Adj is lower alphabetically
			{
				Car onCarBuff(*onCar); //Should hopefully call the copy const
				
				//Pull a switch-a-roo
				(*onCar).copy(*adjCar);
				(*adjCar).copy(onCarBuff);
				
				sortCount++;
				
				break; //Stop the for loop and start over	
					
			}
			
			onCar++;
			adjCar++;
			
			
		}
		
		onCar = NULL;
		adjCar = NULL;
	
	} while (sortCount != 0);
	
	return;
	
}

//Selection Sort
void Agency::sortByPrice() // highest to lowest
{
	Car *currentLocation = inventory;
	
	for (int i = 0; i < 15; i++)
	{
		Car *highestCar;
		Car *invTrav = inventory;
		
		float currentHigh = 0.0;
		
		for (int ii = 0; ii < i; ii++)
		{
			invTrav++;
		
		}
		
		for (int ii = 0; ii < (15 - i); ii++)
		{
			float checkPrice = (*invTrav).getPrice();
			
			if (checkPrice > currentHigh)
			{
				highestCar = invTrav;
				
				currentHigh = checkPrice;
			
			}
			
			invTrav++;
			
		}
		
		Car currentBuff(*currentLocation);
		(*currentLocation).copy(*highestCar);
		(*highestCar).copy(currentBuff);
		
		highestCar = NULL;
		invTrav = NULL;
		
		currentLocation++;
	
	}
	
	currentLocation = NULL;
	
	return;

}

void Agency::searchByMake(char *sentMake) const
{
	int foundCount = 0;
	Car *invTrav = inventory;
	
	for (int i = 0; i < 15; i++)
	{
		char sentFirstChar = (*sentMake);
		char checkFirstChar = *((*invTrav).getMake());
		
		if (sentFirstChar == checkFirstChar)
		{
			int isSame = 1; //Assume same until proven different
			
			char *sentTrav = sentMake;
			char *checkTrav = (*invTrav).getMake();
			
			//Go through each character and compare them
			for (int ii = 0; ii < 20; ii++)
			{
				if (*sentTrav != *checkTrav)
				{
					isSame = 0;
					
					break;
				
				}
				
				sentTrav++;
				checkTrav++;
			
			}
			
			if (isSame == 1) //They are the same
			{
				if (foundCount == 0)
				{
					cout << "The following cars were found: " << endl;
				
				}
				
				(*invTrav).print();
				
				foundCount++;
			
			}
			
			invTrav++;
		
		}
	
	}
	
	if (foundCount == 0)
	{
		cout << "No cars with the make \"" << sentMake << "\" could be found. " << endl;
	
	}
	
	return;

}

