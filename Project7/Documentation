	Project 7 required us to create our own Polynomial class which stored polynomials as well as performed operations on individual polynomials and operations between polynomials. The project asked us to give the class the ability to solve a polynomial for a certain value of x, we also had to write functions for the extraction and insertion operator (these classes were just essentially the Print and ReadInData functions from previous assignments with a few extra quirks), we had to also write functions for the multiplication operator to be able to both multiply a polynomial by a constant, and to also be able to multiply a polynomial by another polynomial, finally we also had to be able to perform addition and subtraction between polynomials.
	Most of the code for the project was pretty straight-forward and I didn’t really have any problems implementing most of the functions. I was a bit confused at first with the implementation of the insertion and extraction operator functions, because I was getting an error saying I need to send two variables (the stream and whatever class object), and it took me longer than it honestly should have to figure out that I needed to include the stream as an argument, and return the stream at the end of the function. I had the most trouble in implementing the polynomial * polynomial function, as could probably be assumed by the increase in comments in that section. Thankfully, we were allowed to use bracket notation with arrays, so I implemented my algorithm using a 2D array. The 2D array is confusing from an outside perspective, but essentially in the 2D array, say it’s called unsorted[x][y], the x value denotes the power (so all coefficients in one row are all to be multiplied by x^(max degree - position, so values in the 0th row are all to the max degree. This allowed me to store the like-terms into one row, and then later on I could find the sum of all the like terms for that degree.
	Given more time, I would work on tweaking my >> operator function a bit, because it will sometimes still print “1x” instead of just “x” for certain powers, and sometimes it will print “0x” instead of just omitting that term for certain powers. These would just take an if-statement or two to fix, but I do not think they are major issues in any way.

