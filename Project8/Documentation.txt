	Project 8 required us to write our own stack class for multiple stack types. A stack is a last-in-first-out data structure where the data most recently entered or “pushed” is the first to be retrieved or “popped”. We were required to write a stack class where the top stayed at the 0th value, so the last entered value was always at position 0, another where each entered value was added onto the end of the stack, so the original entered value stayed at 0 and the top moved down the array, and another where there was no top because each value was given a node, which meant theoretically infinitely large stacks. This project relied heavily on our knowledge of classes and how they worked as well as friend functions and other class parts.
	I had a lot of trouble with this project programming wise. I wouldn’t have minded it too much if it hadn’t have been so open ended. While I appreciated the open endedness of the last project, for example, I think it made this project, which was meant to introduce stacks, much harder than it should have been. My biggest recurring problem is a bug that I was unable to fix which appears in the insertion operator functions for stack2 and stack3. The bug happens when the stack is printed, it adds an extra blank space to the end, so a stack of 0 1 2 3 would print as [0, 1, 2, 3, ] when it should be [0, 1, 2, 3]. I attempted multiple solutions, each of which just introduced a different issue with printing, so I decided to let it be because it seems relatively harmless and only ever affects output. This bug does not appear in my stack1 implementation thankfully. I also had an issue with writing my stack2 implementation at first which essentially derived from me being lazy and trying to copy/paste a majority of my stack1 code and only doing minor edits. I fixed issues from this by rewriting a majority of my functions. An issue that I was unable to get working has to do with my assignment operator functions. I had an issue with the return part of the function and in every implementation it returns an empty stack no matter what I do. I tried all week to fix it and I could never find a working solution, so my assignment operator is essentially non-functioning, but my copy constructor works perfectly fine.
	Given more time, I would have gone through and cleaned up lines of code that I left undeleted (they were parts of code that did get deleted, but I forgot to delete some lines, mostly just the occasional declaration here and there). I also would have checked for memory leaks. Unfortunately too strapped for time and was unable to check and fix memory leaks, though any that do potentially exist would be relatively minor.
