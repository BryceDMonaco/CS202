	Project 8 required us to write out own queue class for integers. Unlike stacks, queues are first-in-first-out data structures. Adding data to the queue inserts it at the end (unlike stacks) and removing data pulls it from the front of the queue. We programmed three types of queues, one was set up so that the front stayed at position 0 in the data array, another was set so that both front and rear could be at any position in the array and wrap around if necessary, and another was set up to have a theoretically infinite amount of nodes for an infinitely long queue so long as there is memory available.
	For the most part, I didn’t have any major issues in programming the different queues. The stay queue was pretty easy to pump out in an hour or so, the node queue took a few hours over a few days but ultimately it wasn’t too hard to put together, but ultimately the wrap queue was the hardest part of the project. The biggest challenge of the wrap queue was understanding how to use modulus division. I understand how to use the modulo operator and what it does, I just wasn’t sure where and how to use it. After multiple attempts I finally started to figure out how to use it. In all of my implementations I had a printing issue with the insertion operator friend function where the last item in the queue would get printed twice in a row. This was fixed by just changing the condition in the respective for loops.
	Given more time I would have written a more thorough test driver. I feel that my test driver I used was very very barebones and only tested a few small parts of the queue. I would also work on better managing memory leaks, I wasn’t able to check for leaks because I was running low on time after the wrap queue. 
